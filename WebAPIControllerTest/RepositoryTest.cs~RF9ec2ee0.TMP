using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using DataAccessLayer.Interface;
using DataLayer;
using DataLayer.Entities;
using NUnit.Framework;
using Moq;

namespace WebAPIControllerTest
{
    /// <summary>
    /// Summary description for RepositoryTest
    /// </summary>
    [TestFixture]
    public class RepositoryTest: MockRepository<MockDataContext>
    {
        private MockRepository<MockDataContext> _repo; 
        private MockDataContext _fakeContext = new MockDataContext();

        public RepositoryTest(): base()//new List<MockDataContext>())
        {
            _repo = new MockRepository<MockDataContext>();
        }

        [SetUp]
        public void SetUp()
        {
           
            _fakeContext = new MockDataContext();
            _context = new List<MockDataContext>();
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        [Test]
        public void Can_GetAll_ProductType_Test()
        {
            var allTypes = _repo.GetAll();
            var actualResult = allTypes.Count();
            Assert.AreEqual(3,actualResult);
            //var repo = new MockRepository<MockDataContext>(_context);
            //var result = repo.GetAll();
            //var count = result.Count();
            //Assert.AreEqual(3, count);
        }
    }
}
