using System;
using System.Text;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using DataAccessLayer.Interface;
using DataLayer.Entities;
using DataAccessLayer;
using DataLayer;
using Moq;

namespace BusinessLogicTest
{
    /// <summary>
    /// Summary description for ProductTypeServiceTest
    /// </summary>
    [TestClass]
    public class ProductTypeServiceTest
    {
        private static ProductTypeRepository prodTypeRepo;
        private LicensingContext ctx;

        [TestInitialize]
        public void Initialize()
        {
            //var prodTypeRepo = new ProductTypeRepository();
           
        }


        private TestContext prodTypeRepo;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext testContextInstance
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        [TestMethod]
        public void Get_SingleProductType_IsNullAnException()
        {
            prodTypeRepo.GetProductTypeById(1);
            Assert.AreEqual(actVal, "CDR");

        }

        [TestMethod]
        public void Add_ProductType_IsNullAnException()
        {

            var type = new ProductType()
            {
                Id = 1,
                Type = "CDR"
            };

            prodTypeRepo.Insert(type);
            Assert.AreNotEqual(null, "CDR");
        }
    }
}
