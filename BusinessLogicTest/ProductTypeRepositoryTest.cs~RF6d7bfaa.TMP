using System;
using System.Text;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Core.Objects.DataClasses;
using System.Linq;
using System.Runtime.Remoting.Contexts;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using DataAccessLayer.Interface;
using DataLayer.Entities;
using DataAccessLayer;
using DataLayer;
using DataLayer.Enums;
using Moq;

namespace BusinessLogicTest
{
    /// <summary>
    /// Test behaviors of ProductType repository by mocking ProductTypeRepository interface
    /// </summary>
    [TestClass]
    public class ProductTypeRepositoryTest
    {
        public readonly IProductTypeRepository MockProductTypeRepo;
        public Mock<IProductTypeRepository> mockProductTypeRepo;
        //public Mock<LicensingContext> mockContext;
        //public Mock<DbSet<ProductType>> mockSet;
        
        //Constructor
        public ProductTypeRepositoryTest()
        {
            //create mock data
            IList<ProductType> types = new List<ProductType>()
            {
                new ProductType{ Id = 1, Type = "BVMS"},
                new ProductType{ Id = 2, Type = "CDR"}
            };
            //mock the product type repository using Moq
            mockProductTypeRepo = new Mock<IProductTypeRepository>();
            //access mock instance
            this.MockProductTypeRepo = mockProductTypeRepo.Object;
            //set up GetById method
            mockProductTypeRepo.Setup(mp => mp.GetById(It.IsAny<int>())).Returns((int i) => types.Where(x => x.Id == i).Single());
            //set up create method
            mockProductTypeRepo.Setup(mp => mp.Insert(It.IsAny<ProductType>())).Returns(true);
            
        }


        //[TestInitialize]
        //public void Initialize()
        //{      
        //     //create mock data
        //    IList<ProductType> types = new List<ProductType>()
        //    {
        //        new ProductType{ Id = 1, Type = "BVMS"},
        //        new ProductType{ Id = 2, Type = "CDR"}
        //    };
             
          
            
            //Mock<IGenericRepository<ProductType>> mockService = new Mock<IGenericRepository<ProductType>>();

            //mock licensing context
            //mockContext = new Mock<LicensingContext>();

            //mock DbSet ProductType
            //mockSet = new Mock<DbSet<ProductType>>();

            


            // var service = new mockService(mockContext.Object);

            //Set up
            //mockContext.Setup(m => m.ProductTypes).Returns(mockSet.Object);


            //var service = new IGenericRepository<mockContext.Object>();

            //return product type by id

            





            //mockProductTypeRepo.Setup(mp => mp.Insert(It.IsAny<ProductType>())).Returns(
            //    (ProductType target) =>
            //    {
            //        if (target.Id.Equals(default(int)))
            //        {
            //            target.Id = types.Count() + 1;
            //            target.Type = "VCI";
            //            types.Insert(target);
            //        }
            //        else
            //        {
            //            var original = types.Where(q => q.Id == target.Id).Single();

            //            if (original == null)
            //            {
            //                return false;
            //            }

            //            original.Type = target.Type;
            //        }
            //        return true;
            //    }

            //    );

        


        [TestMethod]
        public void Can_CreateProductType()
        {

            var newType = new ProductType() { Id = 3, Type = "ABC" };
            bool id = MockProductTypeRepo.Insert(newType);
            Assert.AreEqual(true, id);

        }

        [TestMethod]
        public void Can_GetProductTypeById_ReturnProductType()
        {
            ProductType testProductType = this.MockProductTypeRepo.GetById(2);

            Assert.IsNotNull(testProductType);
            Assert.IsInstanceOfType(testProductType, typeof(ProductType));
            Assert.AreEqual("CDR", testProductType.Type);
        }

        [TestMethod]
        public void Check_Moq()
        {
            // Create Moq
            Mock<IProductTypeRepository> mockProductTypeRepo = new Mock<IProductTypeRepository>();

            // Setup
            mockProductTypeRepo.Setup(x => x.Insert(new ProductType())).Returns(true);

            mockProductTypeRepo.Verify();
        }

        
    }
}
