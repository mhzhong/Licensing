using System;
using System.Text;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using DataAccessLayer.Interface;
using DataLayer.Entities;
using DataAccessLayer;
using DataLayer;
using Moq;

namespace BusinessLogicTest
{
    /// <summary>
    /// Summary description for ProductTypeServiceTest
    /// </summary>
    [TestClass]
    public class ProductTypeServiceTest
    {
        private IProductTypeRepository prodTypeRepoMock;
        private LicensingContext ctx;

        private ProductType typeOne = new ProductType()
        {
            Id = 1,
            Type = "BVMS"
        };

        public ProductType TypeOne
        {
            get { return typeOne; }
            set { typeOne = value; }
        }

        

        [TestInitialize]
        public void Initialize()
        {
           prodTypeRepoMock = new ProductTypeRepository();
           ctx = new LicensingContext();
        }


        

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion

        [TestMethod]
        public void Get_SingleProductType_IsNullAnException()
        {
            var product = prodTypeRepoMock.GetProductTypeById(1);
            Assert.AreEqual(product.Type, "CDR");

        }

        [TestMethod]
        public void Add_ProductType_IsNullAnException()
        {
            Mock<ProductType> objProdType = new Mock<ProductType>();
            //objProdType.Setup(x=>x.)
            //var type = new ProductType()
            //{
            //    Id = 1,
            //    Type = "CDR"
            //};

            //prodTypeRepo.Insert(type);
            //Assert.AreNotEqual(null, "CDR");
        }
    }
}
