using DataAccessLayer.Interface;
using DataLayer;
using DataLayer.Entities;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace DataAccessLayer
{
    public class ProductTypeRepository : GenericRepository<LicensingContext, ProductType>, IProductTypeRepository
    {
        public bool Delete(int productTypeId)
        {
            var type = Context.ProductTypes.FirstOrDefault(x => x.Id == productTypeId);
            Context.Entry(type).State = EntityState.Modified;
            Context.ProductTypes.Remove(type);
            Context.SaveChanges();

            return true;

        }        
        // GET: api/ProductType
        //IEnumerable<ProductType> GetProductTypes()
        //{
        //    var allTypes = GetAll();
        //    return allTypes.ToList();
        //} 


        //public virtual ProductType GetProductTypeById(int id)
        //{
        //    var query = Context.ProductTypes.FirstOrDefault(x => x.Id == id);

        //    return query;
        //}

        public virtual bool Insert(ProductType productType)
        {

            Context.ProductTypes.Add(productType);
            Context.SaveChanges();

            return true;
        }



        //private LicensingContext _ctx;

        //public ProductTypeRepository(LicensingContext ctx)
        //{
        //    _ctx = ctx;
        //}


        //public IEnumerable<ProductType> GetAll()
        //{
        //    IEnumerable<ProductType> query = _ctx.Set<ProductType>();
        //    return query;
        //}
    }
}
