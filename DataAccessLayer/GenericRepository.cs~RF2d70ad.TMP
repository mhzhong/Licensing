using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DataAccessLayer.Interface;
using DataLayer.Entities;
using System.Data.Entity;
using System.Linq.Expressions;
using DataLayer;

namespace DataAccessLayer
{
    //public class GenericRepository<T> : IGenericRepository<T>
    //{
    //    private LicensingContext _ctx;

    //    public GenericRepository(LicensingContext ctx)
    //    {
    //        _ctx = ctx;
    //    }

    //    public IEnumerable<License> 
    //}




    public abstract class GenericRepository<C, T> : IGenericRepository<T>
        where T : class
        where C : LicensingContext, new()
        {
        private C _entities = new C();
        protected C Context
        {
            get { return _entities; }
            set { _entities = value; }
        }

        public virtual IEnumerable<T> GetAll()
        {
            IEnumerable<T> query = _entities.Set<T>().ToList();
            return query;
        }

        //public T Get(int id)
        //{
        //    T query = _entities.Set<T>().Find(id);
        //    return query;
        //}

        //public IEnumerable<T> FindBy(Expression<Func<T, bool>> predicate)
        //{
        //    IEnumerable<T> query = _entities.Set<T>().Where(predicate);
        //    return query;
        //}

        public bool Insert(T entity)
        {
            _entities.Set<T>().Add(entity);
            _entities.SaveChanges();
            return true;
        }

        //public void AddRange(IEnumerable<T> entities)
        //{
        //    _entities.Set<T>().AddRange(entities);
        //}

        //public void Delete(T entity)
        //{
        //    _entities.Set<T>().Remove(entity);
        //}

        //public void DeleteRange(IEnumerable<T> entities)
        //{
        //    _entities.Set<T>().RemoveRange(entities);
        //}

        //public void Dispose()
        //{
        //    if (_entities != null) _entities.Dispose();
        //}
    }
}
