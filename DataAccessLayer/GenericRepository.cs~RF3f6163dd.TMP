using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DataAccessLayer.Interface;
using DataLayer.Entities;
using System.Data.Entity;
using System.Linq.Expressions;

namespace DataAccessLayer
{
    public abstract class GenericRepository<C, T>: IGenericRepository<T> where T: class where C: DbContext, new()
    {
        private C _entities = new C();
        protected C Context
        {
            get { return _entities; }
            set { _entities = value; }
        }
        //protected readonly DbContext Context;

        //public GenericRepository(DbContext context)
        //{
        //    Context = context;
        //}

        public IEnumerable<T> GetAll()
        {
            IEnumerable<T> query = _entities.Set<T>().ToList();
            return query;
        }

        public T Get(int id)
        {
            T query = _entities.Set<T>().Find(id);
            return query;
        }

        public IEnumerable<T> FindBy(Expression<Func<T, bool>> predicate)
        {
            IEnumerable<T> query = _entities.Set<T>().Where(predicate);
            return query;
        }

        public void Add(T entity)
        {
            _entities.Set<T>().Add(entity);
        }

        public void AddRange(IEnumerable<T> entities)
        {
            _entities.Set<T>().AddRange(entities);
        }

        public void Delete(T entity)
        {
            _entities.Set<T>().Remove(entity);
        }

        public void DeleteRange(IEnumerable<T> entities)
        {
            _entities.Set<T>().RemoveRange(entities);
        }
    }
}
