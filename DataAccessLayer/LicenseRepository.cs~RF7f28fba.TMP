using DataAccessLayer.Interface;
using DataLayer;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;
using DataLayer.Entities;
using License = System.ComponentModel.License;


namespace DataAccessLayer
{

    public class LicenseRepository: GenericRepository<LicensingContext, License>, ILicenseRepository
    {
        

        public virtual IEnumerable<DataLayer.Entities.License> GetLicensesByProductTypeId(int id)
        {
            //var licenses = 
            //    (from x in Context.Licenses
            //    where x.ProductTypeId == id
            //    select x).ToList();

            //return licenses;

            return Context.Licenses.Where(x => x.ProductTypeId == id).AsQueryable();
        }

        
        public DataLayer.Entities.License GetLicenseByName(string name)
        {
            return Context.Licenses.Find(name);
        }


        public IEnumerable<DataLayer.Entities.License> GetAll()
        {
           // return Context.Licenses.AsEnumerable();
            //return Context.Licenses.
            //    Include("ProductFamily")
            //    .Include("Subscription")
            //    .Include("Version")
            //    .Include("Application")
            //    .Include("ProductType")
            //    .Include("Authorization")
            //    .Where(l=>l.ProdFamilyId == ProductFamily.Id)

            var query = from l in Context.Licenses
                            join pf in Context.ProductFamilys on l.ProdFamilyId equals pf.Id
                            join s in Context.Subscriptions on l.SubscriptionId equals s.Id
                            join v in Context.SoftwareVersions on l.VersionId equals v.Id
                            join a in Context.Applications on l.ApplicationId equals a.Id
                            select l;
            return query.ToList();
        }

        public DataLayer.Entities.License GetById(int id)
        {
            //return Context.Licenses.FirstOrDefault(c => c.Id == id);
            var query = from l in Context.Licenses
                        join pf in Context.ProductFamilys on l.ProdFamilyId equals pf.Id
                        join s in Context.Subscriptions on l.SubscriptionId equals s.Id
                        join v in Context.SoftwareVersions on l.VersionId equals v.Id
                        join a in Context.Applications on l.ApplicationId equals a.Id
                        where l.Id == id
                        select l;

            return query.FirstOrDefault();
        }

        //public IEnumerable<DataLayer.Entities.License> GetBy(System.Linq.Expressions.Expression<Func<DataLayer.Entities.License, bool>> predicate)
        //{
        //    throw new NotImplementedException();
        //}

        public bool Insert(DataLayer.Entities.License newLicense)
        {
           
            Context.Licenses.Add(newLicense);
            Context.SaveChangesAsync();
            return true;
           
        }

        public bool Delete(DataLayer.Entities.License license)
        {
            return true;
        }

        public bool Update(DataLayer.Entities.License updatedLicense)
        {
            var existing = Context.Licenses.FirstOrDefault(x => x.Id == updatedLicense.Id);
   
            Context.Entry(existing).CurrentValues.SetValues(updatedLicense);

            return true;

        }
    }



       
    //    private LicensingContext _ctx;

    //    public LicenseRepository(LicensingContext ctx)
    //    {
    //        _ctx = ctx;
    //    }

    //    public void Insert(License license)
    //    {
    //        _ctx.Set<License>().Add(license);
    //    }

    //    public IEnumerable<License> GetAllLicenses()
    //    {
    //        //return _ctx.Licenses.Cast(IEnumerable<License>);
    //        throw new NotImplementedException();
    //    }

    //    public License GetLicenseById(int id)
    //    {
    //        //var license = _ctx.Licenses
    //        //            .Include("ProductFamily")
    //        //            .Include("Subscription")
    //        //            .Include("SoftwareVersion")
    //        //            .Include("Application")
    //        //            .Include("ProductType")
    //        //            .Include("Authorization")
    //        //            .Where(x => x.Id == id)
    //        //            .SingleOrDefault();
    //        //return license;
    //        throw new NotImplementedException();
    //    }

    //    public IEnumerable<DataLayer.Entities.License> GetLicensesByProductTypeId(int id)
    //    {
    //        throw new NotImplementedException();
    //    }

    //    public void Update(DataLayer.Entities.License license)
    //    {
    //        throw new NotImplementedException();
    //    }
    //}

}
